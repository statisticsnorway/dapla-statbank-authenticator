on:
  release:
    types: [ published ]
  push:
    branches:
      - master
    paths-ignore:
      - "**/*.md"
      - ".gitignore"
  workflow_dispatch:

env:
  REGISTRY: europe-north1-docker.pkg.dev/${{ secrets.GAR_PROJECT_ID }}
  IMAGE_NAME: dapla-statbank-authenticator
  TEAM_NAME: dapla-stat
  TAG: ${{ github.ref_name }}-${{ github.sha }}

jobs:
  setup-build-push-deploy:
    name: Set up variables to build/push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2.1.2
      with:
        workload_identity_provider: "projects/${{ secrets.GAR_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/gh-actions/providers/gh-actions"
        service_account: "gh-actions-${{ env.TEAM_NAME}}@${{ secrets.GAR_PROJECT_ID }}.iam.gserviceaccount.com"
        token_format: access_token

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Artifact Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: "oauth2accesstoken"
        password: "${{ steps.auth.outputs.access_token }}"

    - name: Extract build metadata for Docker
      id: build_metadata
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.TEAM_NAME }}-docker/${{ env.IMAGE_NAME_LAB }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern=v{{version}}
          type=semver,pattern=v{{major}}.{{minor}}
          type=semver,pattern=v{{major}}
          type=semver,pattern={{version}}
          type=raw,value=${{ env.TAG }}, enable=true

    - name: Build and push docker image to Artifact Registry
      uses: docker/build-push-action@v5
      with:
        provenance: false
        file: Dockerfile
        push: true
        tags: ${{ steps.build_metadata.outputs.tags }}
        labels: ${{ steps.build_metadata.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max